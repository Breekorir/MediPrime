* 🧑‍⚕️ Individual and Pharmacy registration
* 🔐 Role-based login and dashboards
* 🔍 Search medicines by name, location, or availability
* 🏥 Pharmacies can manage their own medicine listings
* 📊 Admin dashboard with medicine stats
* ✉️ Session-based authentication using `express-session`
* 🔔 Real-time notifications for medicine availability
* 📱 Responsive design for mobile and desktop
* 🛒 Online ordering and order tracking
* 🔄 Automatic stock updates by pharmacies

=======
## 🌐 Features

* 🧑‍⚕️ Individual and Pharmacy registration
* 🔐 Role-based login and dashboards, including new role "Pharmacy Staff" with sub-roles (pharmacist, manager, assistant)
* 🔍 Search medicines by name, location, or availability
* 🏥 Pharmacies can manage their own medicine listings
* 📊 Admin dashboard with medicine stats
* ✉️ Session-based authentication using `express-session`
* 🔔 Real-time notifications for medicine availability
* 📱 Responsive design for mobile and desktop
* 🛒 Online ordering and order tracking
* 🔄 Automatic stock updates by pharmacies
* 📝 User activity logging middleware for tracking actions
* 💬 Secure messaging service with real-time chat using Socket.IO between users, pharmacies, and pharmacy staff
* 📜 Prescription history and manual prescription entry for users
* 👥 Pharmacy staff management (add/delete staff)
* 📈 Pharmacy dashboard enhancements with pending and total order counts
* 🔎 Medicine filtering endpoint for advanced search
* 🔐 Improved role-based authorization including sub-roles for pharmacy staff
* 📦 Enhanced order management with status updates by pharmacies and staff
* 🔑 Enhanced login and signup handling for new roles

<<<<<<< SEARCH
## 🚀 Setup Instructions

### 1. Clone the repository

```bash
git clone https://github.com/your-username/mediprime.git
cd mediprime
```

### 2. Install dependencies

```bash
npm install
```

### 3. Configure your MySQL database

Create a database called `mediprime_db` and run the following SQL:

```sql
CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  username VARCHAR(100),
  email VARCHAR(100) UNIQUE,
  password VARCHAR(255),
  role ENUM('user', 'pharmacy', 'admin') DEFAULT 'user'
);

CREATE TABLE medicines (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100),
  location VARCHAR(100),
  availability ENUM('available', 'unavailable') DEFAULT 'available',
  pharmacy_id INT,
  FOREIGN KEY (pharmacy_id) REFERENCES users(id)
);

CREATE TABLE orders (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT,
  medicine_id INT,
  quantity INT,
  status ENUM('pending', 'completed', 'cancelled') DEFAULT 'pending',
  order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(id),
  FOREIGN KEY (medicine_id) REFERENCES medicines(id)
);
```

Update the MySQL connection in `server.js`:

```js
const db = mysql.createConnection({
  host: "localhost",
  user: "your_mysql_user",
  password: "your_mysql_password",
  database: "mediprime_db"
});
```

### 4. Seed the database (optional)

You can seed the database with sample data by running:

```bash
node seed.js
```

### 5. Run the app

```bash
node server.js
```

Visit: [http://localhost:3000](http://localhost:3000)

=======
## 🚀 Setup Instructions

### 1. Clone the repository

```bash
git clone https://github.com/your-username/mediprime.git
cd mediprime
```

### 2. Install dependencies

```bash
npm install
```

### 3. Configure environment variables

Create a `.env` file in the root directory with the following variables:

```
PORT=3000
DB_HOST=localhost
DB_USER=your_mysql_user
DB_PASSWORD=your_mysql_password
DB_DATABASE=mediprime_db
SESSION_SECRET=your_session_secret
CLIENT_URL=http://localhost:3000
NODE_ENV=development
```

### 4. Configure your MySQL database

Create a database called `mediprime_db` and run the following SQL:

```sql
CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  username VARCHAR(100),
  email VARCHAR(100) UNIQUE,
  password VARCHAR(255),
  role ENUM('user', 'pharmacy', 'admin') DEFAULT 'user'
);

CREATE TABLE pharmacies (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100),
  email VARCHAR(100) UNIQUE,
  password VARCHAR(255)
);

CREATE TABLE pharmacy_staff (
  id INT AUTO_INCREMENT PRIMARY KEY,
  pharmacy_id INT,
  username VARCHAR(100),
  email VARCHAR(100) UNIQUE,
  password VARCHAR(255),
  role_within_pharmacy ENUM('pharmacist', 'manager', 'assistant'),
  FOREIGN KEY (pharmacy_id) REFERENCES pharmacies(id)
);

CREATE TABLE medicines (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100),
  location VARCHAR(100),
  availability INT DEFAULT 0,
  pharmacy_id INT,
  pharmacy_name VARCHAR(100),
  category VARCHAR(100),
  FOREIGN KEY (pharmacy_id) REFERENCES pharmacies(id)
);

CREATE TABLE orders (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT,
  medicine_id INT,
  quantity INT,
  status ENUM('pending', 'completed', 'cancelled') DEFAULT 'pending',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(id),
  FOREIGN KEY (medicine_id) REFERENCES medicines(id)
);

CREATE TABLE prescriptions (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT,
  medicine_id INT NULL,
  prescription_text TEXT NULL,
  doctor_name VARCHAR(100),
  issue_date DATE,
  expiry_date DATE NULL,
  quantity INT,
  notes TEXT NULL,
  FOREIGN KEY (user_id) REFERENCES users(id),
  FOREIGN KEY (medicine_id) REFERENCES medicines(id)
);

CREATE TABLE messages (
  id INT AUTO_INCREMENT PRIMARY KEY,
  sender_id INT,
  sender_role VARCHAR(50),
  receiver_id INT,
  receiver_role VARCHAR(50),
  content TEXT,
  timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  is_read BOOLEAN DEFAULT FALSE
);

CREATE TABLE user_activity_logs (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT,
  action_type VARCHAR(100),
  details TEXT,
  ip_address VARCHAR(45),
  user_agent TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### 5. Seed the database (optional)

You can seed the database with sample data by running:

```bash
node seed.js
```

### 6. Run the app

```bash
node server.js
```

Visit: [http://localhost:3000](http://localhost:3000)
